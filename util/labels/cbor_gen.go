// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package labels

import (
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *UnsignedLabel) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 6

	if t.CID == nil {
		fieldCount--
	}

	if t.Neg == nil {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t.CID (string) (string)
	if t.CID != nil {

		if uint64(len("cid")) > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"cid\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("cid"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("cid")); err != nil {
			return err
		}

		if t.CID == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if uint64(len(*t.CID)) > cbg.MaxLength {
				return xerrors.Errorf("Value in field t.CID was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(*t.CID))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(*t.CID)); err != nil {
				return err
			}
		}
	}

	// t.CTS (string) (string)
	if uint64(len("cts")) > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"cts\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("cts"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("cts")); err != nil {
		return err
	}

	if uint64(len(t.CTS)) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.CTS was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.CTS))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.CTS)); err != nil {
		return err
	}

	// t.Neg (bool) (bool)
	if t.Neg != nil {

		if uint64(len("neg")) > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"neg\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("neg"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("neg")); err != nil {
			return err
		}

		if t.Neg == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if err := cbg.WriteBool(w, *t.Neg); err != nil {
				return err
			}
		}
	}

	// t.Src (string) (string)
	if uint64(len("src")) > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"src\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("src"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("src")); err != nil {
		return err
	}

	if uint64(len(t.Src)) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Src was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Src))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Src)); err != nil {
		return err
	}

	// t.URI (string) (string)
	if uint64(len("uri")) > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"uri\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("uri"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("uri")); err != nil {
		return err
	}

	if uint64(len(t.URI)) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.URI was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.URI))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.URI)); err != nil {
		return err
	}

	// t.Val (string) (string)
	if uint64(len("val")) > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"val\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("val"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("val")); err != nil {
		return err
	}

	if uint64(len(t.Val)) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Val was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Val))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Val)); err != nil {
		return err
	}
	return nil
}

func (t *UnsignedLabel) UnmarshalCBOR(r io.Reader) (err error) {
	*t = UnsignedLabel{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("UnsignedLabel: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.CID (string) (string)
		case "cid":

			{
				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					sval, err := cbg.ReadString(cr)
					if err != nil {
						return err
					}

					t.CID = (*string)(&sval)
				}
			}
			// t.CTS (string) (string)
		case "cts":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.CTS = string(sval)
			}
			// t.Neg (bool) (bool)
		case "neg":

			{
				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					maj, extra, err = cr.ReadHeader()
					if err != nil {
						return err
					}
					if maj != cbg.MajOther {
						return fmt.Errorf("booleans must be major type 7")
					}

					var val bool
					switch extra {
					case 20:
						val = false
					case 21:
						val = true
					default:
						return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
					}
					t.Neg = &val
				}
			}
			// t.Src (string) (string)
		case "src":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Src = string(sval)
			}
			// t.URI (string) (string)
		case "uri":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.URI = string(sval)
			}
			// t.Val (string) (string)
		case "val":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Val = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *SignedLabel) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{162}); err != nil {
		return err
	}

	// t.Sig (string) (string)
	if uint64(len("sig")) > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"sig\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("sig"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("sig")); err != nil {
		return err
	}

	if uint64(len(t.Sig)) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Sig was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Sig))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Sig)); err != nil {
		return err
	}

	// t.UnsignedLabel (labels.UnsignedLabel) (struct)
	if uint64(len("UnsignedLabel")) > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"UnsignedLabel\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("UnsignedLabel"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("UnsignedLabel")); err != nil {
		return err
	}

	if err := t.UnsignedLabel.MarshalCBOR(cw); err != nil {
		return err
	}
	return nil
}

func (t *SignedLabel) UnmarshalCBOR(r io.Reader) (err error) {
	*t = SignedLabel{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("SignedLabel: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Sig (string) (string)
		case "sig":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Sig = string(sval)
			}
			// t.UnsignedLabel (labels.UnsignedLabel) (struct)
		case "UnsignedLabel":

			{

				if err := t.UnsignedLabel.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.UnsignedLabel: %w", err)
				}

			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
