// Code generated by cmd/lexgen (see Makefile's lexgen); DO NOT EDIT.

// Lexicon schema: tools.ozone.moderation.cancelScheduledActions

package ozone

import (
	"context"

	"github.com/bluesky-social/indigo/lex/util"
)

// ModerationCancelScheduledActions_CancellationResults is a "cancellationResults" in the tools.ozone.moderation.cancelScheduledActions schema.
type ModerationCancelScheduledActions_CancellationResults struct {
	// failed: DIDs for which cancellation failed with error details
	Failed []*ModerationCancelScheduledActions_FailedCancellation `json:"failed" cborgen:"failed"`
	// succeeded: DIDs for which all pending scheduled actions were successfully cancelled
	Succeeded []string `json:"succeeded" cborgen:"succeeded"`
}

// ModerationCancelScheduledActions_FailedCancellation is a "failedCancellation" in the tools.ozone.moderation.cancelScheduledActions schema.
type ModerationCancelScheduledActions_FailedCancellation struct {
	Did       string  `json:"did" cborgen:"did"`
	Error     string  `json:"error" cborgen:"error"`
	ErrorCode *string `json:"errorCode,omitempty" cborgen:"errorCode,omitempty"`
}

// ModerationCancelScheduledActions_Input is the input argument to a tools.ozone.moderation.cancelScheduledActions call.
type ModerationCancelScheduledActions_Input struct {
	// comment: Optional comment describing the reason for cancellation
	Comment *string `json:"comment,omitempty" cborgen:"comment,omitempty"`
	// subjects: Array of DID subjects to cancel scheduled actions for
	Subjects []string `json:"subjects" cborgen:"subjects"`
}

// ModerationCancelScheduledActions calls the XRPC method "tools.ozone.moderation.cancelScheduledActions".
func ModerationCancelScheduledActions(ctx context.Context, c util.LexClient, input *ModerationCancelScheduledActions_Input) (*ModerationCancelScheduledActions_CancellationResults, error) {
	var out ModerationCancelScheduledActions_CancellationResults
	if err := c.LexDo(ctx, util.Procedure, "application/json", "tools.ozone.moderation.cancelScheduledActions", nil, input, &out); err != nil {
		return nil, err
	}

	return &out, nil
}
