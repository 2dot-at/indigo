// Code generated by cmd/lexgen (see Makefile's lexgen); DO NOT EDIT.

// Lexicon schema: tools.ozone.moderation.listScheduledActions

package ozone

import (
	"context"

	lexutil "github.com/bluesky-social/indigo/lex/util"
)

// ModerationListScheduledActions_Input is the input argument to a tools.ozone.moderation.listScheduledActions call.
type ModerationListScheduledActions_Input struct {
	// cursor: Cursor for pagination
	Cursor *string `json:"cursor,omitempty" cborgen:"cursor,omitempty"`
	// endsBefore: Filter actions scheduled to execute before this time
	EndsBefore *string `json:"endsBefore,omitempty" cborgen:"endsBefore,omitempty"`
	// limit: Maximum number of results to return
	Limit *int64 `json:"limit,omitempty" cborgen:"limit,omitempty"`
	// startsAfter: Filter actions scheduled to execute after this time
	StartsAfter *string `json:"startsAfter,omitempty" cborgen:"startsAfter,omitempty"`
	// statuses: Filter actions by status
	Statuses []string `json:"statuses" cborgen:"statuses"`
	// subjects: Filter actions for specific DID subjects
	Subjects []string `json:"subjects,omitempty" cborgen:"subjects,omitempty"`
}

// ModerationListScheduledActions_Output is the output of a tools.ozone.moderation.listScheduledActions call.
type ModerationListScheduledActions_Output struct {
	Actions []*ModerationDefs_ScheduledActionView `json:"actions" cborgen:"actions"`
	// cursor: Cursor for next page of results
	Cursor *string `json:"cursor,omitempty" cborgen:"cursor,omitempty"`
}

// ModerationListScheduledActions calls the XRPC method "tools.ozone.moderation.listScheduledActions".
func ModerationListScheduledActions(ctx context.Context, c lexutil.LexClient, input *ModerationListScheduledActions_Input) (*ModerationListScheduledActions_Output, error) {
	var out ModerationListScheduledActions_Output
	if err := c.LexDo(ctx, lexutil.Procedure, "application/json", "tools.ozone.moderation.listScheduledActions", nil, input, &out); err != nil {
		return nil, err
	}

	return &out, nil
}
