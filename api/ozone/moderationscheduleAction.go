// Code generated by cmd/lexgen (see Makefile's lexgen); DO NOT EDIT.

// Lexicon schema: tools.ozone.moderation.scheduleAction

package ozone

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/bluesky-social/indigo/lex/util"
)

// ModerationScheduleAction_FailedScheduling is a "failedScheduling" in the tools.ozone.moderation.scheduleAction schema.
type ModerationScheduleAction_FailedScheduling struct {
	Error     string  `json:"error" cborgen:"error"`
	ErrorCode *string `json:"errorCode,omitempty" cborgen:"errorCode,omitempty"`
	Subject   string  `json:"subject" cborgen:"subject"`
}

// ModerationScheduleAction_Input is the input argument to a tools.ozone.moderation.scheduleAction call.
type ModerationScheduleAction_Input struct {
	Action    *ModerationScheduleAction_Input_Action `json:"action" cborgen:"action"`
	CreatedBy string                                 `json:"createdBy" cborgen:"createdBy"`
	// modTool: This will be propagated to the moderation event when it is applied
	ModTool    *ModerationDefs_ModTool                    `json:"modTool,omitempty" cborgen:"modTool,omitempty"`
	Scheduling *ModerationScheduleAction_SchedulingConfig `json:"scheduling" cborgen:"scheduling"`
	// subjects: Array of DID subjects to schedule the action for
	Subjects []string `json:"subjects" cborgen:"subjects"`
}

type ModerationScheduleAction_Input_Action struct {
	ModerationScheduleAction_Takedown *ModerationScheduleAction_Takedown
}

func (t *ModerationScheduleAction_Input_Action) MarshalJSON() ([]byte, error) {
	if t.ModerationScheduleAction_Takedown != nil {
		t.ModerationScheduleAction_Takedown.LexiconTypeID = "tools.ozone.moderation.scheduleAction#takedown"
		return json.Marshal(t.ModerationScheduleAction_Takedown)
	}
	return nil, fmt.Errorf("can not marshal empty union as JSON")
}

func (t *ModerationScheduleAction_Input_Action) UnmarshalJSON(b []byte) error {
	typ, err := util.TypeExtract(b)
	if err != nil {
		return err
	}

	switch typ {
	case "tools.ozone.moderation.scheduleAction#takedown":
		t.ModerationScheduleAction_Takedown = new(ModerationScheduleAction_Takedown)
		return json.Unmarshal(b, t.ModerationScheduleAction_Takedown)

	default:
		return nil
	}
}

// ModerationScheduleAction_ScheduledActionResults is a "scheduledActionResults" in the tools.ozone.moderation.scheduleAction schema.
type ModerationScheduleAction_ScheduledActionResults struct {
	Failed    []*ModerationScheduleAction_FailedScheduling `json:"failed" cborgen:"failed"`
	Succeeded []string                                     `json:"succeeded" cborgen:"succeeded"`
}

// ModerationScheduleAction_SchedulingConfig is a "schedulingConfig" in the tools.ozone.moderation.scheduleAction schema.
//
// Configuration for when the action should be executed
type ModerationScheduleAction_SchedulingConfig struct {
	// executeAfter: Earliest time to execute the action (for randomized scheduling)
	ExecuteAfter *string `json:"executeAfter,omitempty" cborgen:"executeAfter,omitempty"`
	// executeAt: Exact time to execute the action
	ExecuteAt *string `json:"executeAt,omitempty" cborgen:"executeAt,omitempty"`
	// executeUntil: Latest time to execute the action (for randomized scheduling)
	ExecuteUntil *string `json:"executeUntil,omitempty" cborgen:"executeUntil,omitempty"`
}

// ModerationScheduleAction_Takedown is a "takedown" in the tools.ozone.moderation.scheduleAction schema.
//
// Schedule a takedown action
type ModerationScheduleAction_Takedown struct {
	LexiconTypeID string `json:"$type" cborgen:"$type,const=tools.ozone.moderation.scheduleAction#takedown"`
	// acknowledgeAccountSubjects: If true, all other reports on content authored by this account will be resolved (acknowledged).
	AcknowledgeAccountSubjects *bool   `json:"acknowledgeAccountSubjects,omitempty" cborgen:"acknowledgeAccountSubjects,omitempty"`
	Comment                    *string `json:"comment,omitempty" cborgen:"comment,omitempty"`
	// durationInHours: Indicates how long the takedown should be in effect before automatically expiring.
	DurationInHours *int64 `json:"durationInHours,omitempty" cborgen:"durationInHours,omitempty"`
	// policies: Names/Keywords of the policies that drove the decision.
	Policies []string `json:"policies,omitempty" cborgen:"policies,omitempty"`
}

// ModerationScheduleAction calls the XRPC method "tools.ozone.moderation.scheduleAction".
func ModerationScheduleAction(ctx context.Context, c util.LexClient, input *ModerationScheduleAction_Input) (*ModerationScheduleAction_ScheduledActionResults, error) {
	var out ModerationScheduleAction_ScheduledActionResults
	if err := c.LexDo(ctx, util.Procedure, "application/json", "tools.ozone.moderation.scheduleAction", nil, input, &out); err != nil {
		return nil, err
	}

	return &out, nil
}
