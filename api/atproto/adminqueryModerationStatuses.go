// Code generated by cmd/lexgen (see Makefile's lexgen); DO NOT EDIT.

package atproto

// schema: com.atproto.admin.queryModerationStatuses

import (
	"context"

	"github.com/bluesky-social/indigo/xrpc"
)

// AdminQueryModerationStatuses_Output is the output of a com.atproto.admin.queryModerationStatuses call.
type AdminQueryModerationStatuses_Output struct {
	Cursor          *string                        `json:"cursor,omitempty" cborgen:"cursor,omitempty"`
	SubjectStatuses []*AdminDefs_SubjectStatusView `json:"subjectStatuses" cborgen:"subjectStatuses"`
}

// AdminQueryModerationStatuses calls the XRPC method "com.atproto.admin.queryModerationStatuses".
//
// appealed: Get subjects in unresolved appealed status
// comment: Search subjects by keyword from comments
// includeMuted: By default, we don't include muted subjects in the results. Set this to true to include them.
// lastReviewedBy: Get all subject statuses that were reviewed by a specific moderator
// reportedAfter: Search subjects reported after a given timestamp
// reportedBefore: Search subjects reported before a given timestamp
// reviewState: Specify when fetching subjects in a certain state
// reviewedAfter: Search subjects reviewed after a given timestamp
// reviewedBefore: Search subjects reviewed before a given timestamp
// takendown: Get subjects that were taken down
func AdminQueryModerationStatuses(ctx context.Context, c *xrpc.Client, appealed bool, comment string, cursor string, excludeTags []string, ignoreSubjects []string, includeMuted bool, lastReviewedBy string, limit int64, reportedAfter string, reportedBefore string, reviewState string, reviewedAfter string, reviewedBefore string, sortDirection string, sortField string, subject string, tags []string, takendown bool) (*AdminQueryModerationStatuses_Output, error) {
	var out AdminQueryModerationStatuses_Output

	params := map[string]interface{}{
		"appealed":       appealed,
		"comment":        comment,
		"cursor":         cursor,
		"excludeTags":    excludeTags,
		"ignoreSubjects": ignoreSubjects,
		"includeMuted":   includeMuted,
		"lastReviewedBy": lastReviewedBy,
		"limit":          limit,
		"reportedAfter":  reportedAfter,
		"reportedBefore": reportedBefore,
		"reviewState":    reviewState,
		"reviewedAfter":  reviewedAfter,
		"reviewedBefore": reviewedBefore,
		"sortDirection":  sortDirection,
		"sortField":      sortField,
		"subject":        subject,
		"tags":           tags,
		"takendown":      takendown,
	}
	if err := c.Do(ctx, xrpc.Query, "", "com.atproto.admin.queryModerationStatuses", params, nil, &out); err != nil {
		return nil, err
	}

	return &out, nil
}
